{
  "paper_details": [
    {
      "totalQuestions": "160",
      "paperYear": "2019",
      "paperSet": "A",
      "totalMarks": "300",
      "subjectName": "Java Full Interview Set"
    }
  ],
  "optional_questions": [
    {
      "question": "Which annotation marks the main Spring Boot application class?",
      "options": ["@Component", "@SpringBootApplication", "@Configuration", "@EnableAutoConfig"],
      "correctIndex": 1,
      "explanation": "@SpringBootApplication combines @Configuration, @EnableAutoConfiguration, and @ComponentScan."
    },
    {
      "question": "Which interface is preferred for lambda expression usage?",
      "options": ["Runnable", "Comparable", "FunctionalInterface", "AutoCloseable"],
      "correctIndex": 2,
      "explanation": "@FunctionalInterface ensures an interface can be used with a lambda."
    },
    {
      "question": "Which method is used to start a new thread?",
      "options": ["init()", "start()", "run()", "execute()"],
      "correctIndex": 1,
      "explanation": "start() creates a new thread and invokes the run() method."
    },
    {
      "question": "What is the default fetch type for @ManyToOne in JPA?",
      "options": ["EAGER", "LAZY", "NULL", "AUTO"],
      "correctIndex": 0,
      "explanation": "@ManyToOne uses EAGER fetching by default."
    },
    {
      "question": "Which collection class is thread-safe?",
      "options": ["ArrayList", "HashSet", "ConcurrentHashMap", "LinkedList"],
      "correctIndex": 2,
      "explanation": "ConcurrentHashMap supports thread-safe operations without blocking the entire map."
    },
    {
      "question": "Which SQL command is used to remove a table?",
      "options": ["DELETE", "TRUNCATE", "DROP", "REMOVE"],
      "correctIndex": 2,
      "explanation": "DROP removes the table structure and data."
    },
    {
      "question": "What is the purpose of the transient keyword in Java?",
      "options": ["To make a variable thread-safe", "To prevent serialization", "To hide from reflection", "To encrypt data"],
      "correctIndex": 1,
      "explanation": "transient prevents a variable from being serialized."
    },
    {
      "question": "Which interface allows you to sort custom objects?",
      "options": ["Runnable", "Serializable", "Comparable", "Cloneable"],
      "correctIndex": 2,
      "explanation": "Comparable allows natural sorting of objects."
    },
    {
      "question": "Which design pattern does Spring use for bean creation?",
      "options": ["Builder", "Factory", "Singleton", "Observer"],
      "correctIndex": 1,
      "explanation": "Spring uses Factory pattern to create and manage beans."
    },
    {
      "question": "Which keyword is used to prevent inheritance?",
      "options": ["static", "private", "final", "abstract"],
      "correctIndex": 2,
      "explanation": "final prevents class inheritance and method overriding."
    }
  ],
  "written_questions": {
    "2 Marks": [
      {
        "question": "What is dependency injection?",
        "answer": "It’s a technique where an object receives other objects it depends on from the framework."
      },
      {
        "question": "Difference between PUT and POST in REST APIs?",
        "answer": "PUT is idempotent and used for update/replace; POST is for creating new resources."
      },
      {
        "question": "What is the use of Optional in Java 8?",
        "answer": "It prevents null checks by wrapping a value that may or may not be present."
      },
      {
        "question": "Difference between HashMap and TreeMap?",
        "answer": "HashMap is faster, unordered; TreeMap is slower but sorted by keys."
      },
      {
        "question": "What is a deadlock?",
        "answer": "Deadlock is a condition where two or more threads are blocked forever waiting for each other’s resources."
      },
      {
        "question": "What is the difference between ArrayList and LinkedList?",
        "answer": "ArrayList is backed by array and offers fast random access; LinkedList is backed by nodes and is better for frequent insertion/deletion."
      },
      {
        "question": "What is the difference between abstract class and interface?",
        "answer": "Abstract class can have state and partial implementation; interface is fully abstract (until Java 8's default methods)."
      },
      {
        "question": "What is a Stream in Java 8?",
        "answer": "Stream is used to process data declaratively with filter, map, reduce operations."
      },
      {
        "question": "What does the @Service annotation indicate in Spring?",
        "answer": "It marks a class as a business service component."
      },
      {
        "question": "What is final keyword in Java?",
        "answer": "It restricts modification: a final variable can't be reassigned, a final method can't be overridden, and a final class can't be extended."
      }
    ],
    "5 Marks": [
      {
        "question": "Explain how Spring manages bean scopes with examples.",
        "answer": "Spring beans can be singleton, prototype, request, session, etc. By default, beans are singleton and shared across the application context."
      },
      {
        "question": "Design a rate limiter using Redis or Java in-memory approach.",
        "answer": "Use a map with timestamps. On each request, prune outdated entries. Limit requests per window. Redis can use sorted sets or token buckets."
      },
      {
        "question": "Explain the complete flow of a Spring Boot application.",
        "answer": "The application starts with main() using SpringApplication.run(). Components are scanned, dependencies injected, configuration loaded, beans initialized, and controllers start listening."
      },
      {
        "question": "How does garbage collection work in JVM?",
        "answer": "GC identifies unused objects and reclaims memory. Java uses generational GC — Young (Eden, Survivor) and Old (Tenured) generations with different algorithms like Mark and Sweep."
      },
      {
        "question": "Compare Stream API and traditional for-loop with example.",
        "answer": "Stream API is declarative and parallelizable. For example: list.stream().filter(e -> e > 5).collect(...) vs for-loop that manually filters values."
      },
      {
        "question": "Explain the different thread states in Java.",
        "answer": "States are New, Runnable, Blocked, Waiting, Timed Waiting, and Terminated. Each reflects the lifecycle phase of a thread."
      },
      {
        "question": "How does Hibernate manage lazy loading?",
        "answer": "Hibernate proxies the entity, loading data only when accessed. This reduces initial query size but requires session to stay open."
      },
      {
        "question": "What is the difference between join() and sleep() in threads?",
        "answer": "join() waits for a thread to die. sleep() pauses current thread for a given time without releasing locks."
      },
      {
        "question": "How to create a custom exception in Java?",
        "answer": "Extend Exception or RuntimeException, add constructors, and optionally override getMessage()."
      },
      {
        "question": "Explain microservice communication with examples.",
        "answer": "Services communicate using REST, message queues (RabbitMQ, Kafka), or event streaming. Feign, RESTTemplate, and WebClient are used for calls."
      }
    ]
  }
}
